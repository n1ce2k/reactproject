{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\n1ce\\\\PhpstormProjects\\\\untitled\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { Simulate } from \"react-dom/test-utils\";\nvar input = Simulate.input;\nimport { ApolloProvider } from \"@apollo/client\";\nimport UserList from \"./UserList\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst corsProxyUrl = 'https://cors-anywhere.herokuapp.com/';\nconst apiUrl = 'https://swapi-graphql.netlify.app/';\nconst client = async () => {\n  try {\n    const response = await axios.get(`${corsProxyUrl}${apiUrl}`, {\n      headers: {\n        'Origin': 'http://localhost:3000'\n      }\n    });\n    const data = response.data;\n    // Обработка полученных данных\n    console.log(data);\n  } catch (error) {\n    // Обработка ошибок\n    console.error(error);\n  }\n};\n\n// import './App.css';\n\n// const client = new ApolloClient({\n//     uri: 'https://swapi-graphql.netlify.app/', // Замените на URL вашего GraphQL API\n//     cache: new InMemoryCache(),\n// });\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(UserList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Simulate","input","ApolloProvider","UserList","axios","jsxDEV","_jsxDEV","corsProxyUrl","apiUrl","client","response","get","headers","data","console","log","error","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/n1ce/PhpstormProjects/untitled/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport {Simulate} from \"react-dom/test-utils\";\nimport input = Simulate.input;\nimport {render} from \"react-dom\";\nimport {ApolloClient, ApolloProvider, InMemoryCache} from \"@apollo/client\";\nimport UserList from \"./UserList\";\n\nimport axios from 'axios';\n\nconst corsProxyUrl = 'https://cors-anywhere.herokuapp.com/';\nconst apiUrl = 'https://swapi-graphql.netlify.app/';\n\nconst client = async () => {\n    try {\n        const response = await axios.get(`${corsProxyUrl}${apiUrl}`, {\n            headers: {\n                'Origin': 'http://localhost:3000',\n            },\n        });\n\n        const data = response.data;\n        // Обработка полученных данных\n        console.log(data);\n    } catch (error) {\n        // Обработка ошибок\n        console.error(error);\n    }\n};\n\n\n\n// import './App.css';\n\n// const client = new ApolloClient({\n//     uri: 'https://swapi-graphql.netlify.app/', // Замените на URL вашего GraphQL API\n//     cache: new InMemoryCache(),\n// });\n\nconst App: React.FC = () => {\n\n    return (\n        <ApolloProvider client={client}>\n            <UserList />\n        </ApolloProvider>\n    );\n};\n\n\n\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,MAAoB,OAAO;AAEvC,SAAQC,QAAQ,QAAO,sBAAsB;AAAC,IACvCC,KAAK,GAAGD,QAAQ,CAACC,KAAK;AAE7B,SAAsBC,cAAc,QAAsB,gBAAgB;AAC1E,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAG,sCAAsC;AAC3D,MAAMC,MAAM,GAAG,oCAAoC;AAEnD,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EACvB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEJ,YAAa,GAAEC,MAAO,EAAC,EAAE;MACzDI,OAAO,EAAE;QACL,QAAQ,EAAE;MACd;IACJ,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAI;IAC1B;IACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZ;IACAF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;EACxB;AACJ,CAAC;;AAID;;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAExB,oBACIX,OAAA,CAACJ,cAAc;IAACO,MAAM,EAAEA,MAAO;IAAAS,QAAA,eAC3BZ,OAAA,CAACH,QAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEzB,CAAC;AAACC,EAAA,GAPIN,GAAa;AAYnB,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}